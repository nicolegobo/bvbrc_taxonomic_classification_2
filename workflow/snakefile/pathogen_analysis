import sys
#### relative path from service-script ####
pe_samples = glob_wildcards('staging/pe_reads/{sample}_R{read_num}.fastq.gz').sample
se_samples = glob_wildcards("staging/se_reads/{sample}.fastq.gz").sample
samples = pe_samples+se_samples
msg = 'snakefile command recieved - PATHOGEN ANALYSIS \n'
sys.stderr.write(msg)
configfile: "config.json"
workflow_dir = config["workflow_dir"]

rule_all_list = [
        expand('output/{sample}_krona.html', sample=samples),
        expand('output/{sample}_sankey.html', sample=samples),
        expand('clean_up/{sample}_sankey_files', sample=samples),
        "output/Taxonomic-Classification-Service-BVBRC_multiqc_report.html"
        ]
## this adds felxiblity for one sample (1 single end fq or just one paired end, 2 fqs)
## multisample comparison and visualizations will either fail or be redundant if only one sample present
if len(se_samples) == 1 and len(pe_samples) == 0 or len(se_samples) == 0 and len(pe_samples) == 2:
    ruleorder: generate_sample_krona_plots > generate_multisample_krona_plots > generate_sankey_plots > multiqc
    msg = "preforming analysis for only one sample - DOES NOT INCLUDE MULTISAMPLE_COMPARISON.HTML \n"
    sys.stderr.write(msg)

else:
    ruleorder: generate_sample_krona_plots > generate_multisample_krona_plots > generate_sankey_plots > multisample_comp_table > clean_up_multisample_html_files > multiqc
    msg = "preforming analysis for multiple samples - INCLUDES multisample_comparison.html, multisample_krona.html \n"
    sys.stderr.write(msg)
    rule_all_list.append('output/multisample_comparison.html')
    rule_all_list.append('output/multisample_krona.html')
    rule_all_list.append('clean_up/multisample_comparison_files')


rule all:
    input:
        rule_all_list

rule generate_sample_krona_plots:
    input:
        k2report = 'output/{sample}/kraken_output/{sample}_k2_report.txt'
    output:
        krona_html = 'output/{sample}_krona.html'
    shell:
        '''
        ktImportTaxonomy -t 7 -m 3 \
            {input.k2report} \
            -o {output.krona_html}
        '''

rule generate_multisample_krona_plots:
    input:
        k_reports = set(expand('output/{sample}/kraken_output/{sample}_k2_report.txt', sample=samples))
    output:
        set_krona_plot = 'output/multisample_krona.html'
    shell:
        '''
        ktImportTaxonomy -t 7 -m 3 \
            {input.k_reports} \
            -o {output.set_krona_plot}
        '''

rule generate_sankey_plots:
    input:
        k2report = 'output/{sample}/kraken_output/{sample}_k2_report.txt',
    params:
        sankey_script = os.path.join(workflow_dir, "scripts/sankey_plot_gen.R"),
        tmp_sankey_dir = directory('output/{sample}_sankey_files/')
    output:
        sankey_plot = 'output/{sample}_sankey.html',
        cl_sankey_dir = directory('clean_up/{sample}_sankey_files'),
    shell: 
        '''
        {params.sankey_script} --input {input.k2report} --output {output.sankey_plot}

        mkdir -p clean_up

        mv {params.tmp_sankey_dir} {output.cl_sankey_dir}
        '''

rule multisample_comp_table:
    input:
        k_text = set(expand('output/{sample}/kraken_output/{sample}_k2_report.txt', sample=samples))
    params:
        multisample_comparsion_script = os.path.join(workflow_dir, "scripts/pavian_multisample_comparsion.R"),
        output_dir = 'output/'
    output:
        multi_comp = 'output/multisample_comparison.html',
        multisample_comp_dir = directory('output/multisample_comparison_files')
    shell:
        r'''
        {params.multisample_comparsion_script} --input "{input.k_text}" --output_dir {params.output_dir}
        '''

rule clean_up_multisample_html_files:
    input:
        multi_comp_table = 'output/multisample_comparison.html',
        multisample_comp_dir = 'output/multisample_comparison_files'
    output:
        cl_multisample_comp_dir = directory('clean_up/multisample_comparison_files')
    shell:
        '''
        mv {input.multisample_comp_dir} {output.cl_multisample_comp_dir}
        '''

rule multiqc:
    input:
        multiqc_config = os.path.join(workflow_dir, "multiqc_config.yaml"),
    params:
        landing_dir = 'output/.',
        tmp_multiqc_report = "clean_up/multiqc_data/Taxonomic-Classification-Service-BVBRC_multiqc_report.html"
    output:
        out_multiqc_report = "output/Taxonomic-Classification-Service-BVBRC_multiqc_report.html",
        cl_multiqc_dir = directory('clean_up/multiqc_data')
    shell:
        '''
        multiqc --version

        mkdir -p {output.cl_multiqc_dir}

        multiqc {params.landing_dir} \
            -c {input.multiqc_config} \
            -o {output.cl_multiqc_dir} --fullnames \
            -f \
            --comment "This report contains information about the raw fastq files, host removed fastq files and kraken2 reports."

        mv {params.tmp_multiqc_report} {output.out_multiqc_report}
        '''
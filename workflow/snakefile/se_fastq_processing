import sys

#### running from service-script ####
samples = glob_wildcards("staging/se_reads/{sample}.fastq.gz").sample
msg = 'snakefile command recieved - SINGLE END FASTQ PROCESSING WGS \n'
sys.stderr.write(msg)
configfile: "config.json"
database_path = config["params"]["database"]
host_genome = config["params"]["host_genome"]
save_classified = config["params"]["save_classified_sequences"]
save_unclassified = config["params"]["save_unclassified_sequences"]
confidence_interval = config["params"]["confidence_interval"]
ruleorder: fastqc_raw_reads > classify_with_kraken

rule_all_list = [
        expand('output/{sample}/fastqc_results/raw_reads/raw_{sample}_fastqc.html', sample=samples),
        expand('output/{sample}/kraken_output/{sample}_k2_output.txt', sample=samples),
        ]

# update rule all according to saving the classified and unclassified sequences in the Kraken2 command
if save_classified == True:
    cf = "--classified-out"
    co = "{sample}_classified_reads.fastq"
    co_gz = "output/{sample}/kraken_output/{sample}_classified_reads.fastq.gz"
    rule_all_list.append(expand("output/{sample}/kraken_output/{sample}_classified_reads.fastq.gz", sample=samples))
    msg = "Adding save classified sequences to kraken2 command. \n"
    sys.stderr.write(msg)
else:
    cf = ""
    co = ""
    co_gz = ""

if save_unclassified == True:
    ucf = "--unclassified-out"
    uco = "{sample}_unclassified_reads.fastq"
    uco_gz = "output/{sample}/kraken_output/{sample}_unclassified_reads.fastq.gz"
    rule_all_list.append(expand("output/{sample}/kraken_output/{sample}_unclassified_reads.fastq.gz", sample=samples))
    msg = "Adding save unclassified sequences to kraken2 command. \n"
    sys.stderr.write(msg)
else:
    ucf = ""
    uco = ""
    uco_gz = ""


host_dict = {"homo_sapiens": "GCF_000001405.39_GRCh38.p13_genomic",
    "mus_musculus": "GCF_000001635.26_GRCm38.p6_genomic",
    "rattus_norvegicus" : "GCF_000001895.5_Rnor_6.0_genomic",
    "caenorhabditis_elegans" : "GCF_000002985.6_WBcel235_genomic",
    "drosophila_melanogaster_strain" : "GCF_000001215.4_Release_6_plus_ISO1_MT_genomic",
    "danio_rerio_strain_tuebingen": "GCF_000002035.6_GRCz11_genomic",
    "gallus_gallus" : "GCF_000002315.6_GRCg6a_genomic",
    "macaca_mulatta" : "GCF_003339765.1_Mmul_10_genomic",
    "mustela_putorius_furo" : "GCF_000215625.1_MusPutFur1.0_genomic",
    "sus_scrofa" : "GCF_000003025.6_Sscrofa11.1_genomic"}

# setting rules according to host
if host_genome == "no_host":
    hisat_indices = None
    # set kraken input to trimmed reads as default
    k_input = "staging/se_reads/{sample}.fastq.gz"
    msg = 'No host selected. SKIPPING Hisat2 to remove host dna and fastqc on host removed reads \n'
else:
    # append to rule all list
    # update kraken input to include host removed reads 
    rule_all_list.append(expand('output/{sample}/hisat2_results/{sample}_host_removed.fastq.gz', sample=samples)),
    rule_all_list.append(expand('output/{sample}/fastqc_results/host_removed_reads/{sample}_host_removed_fastqc.html', sample=samples)),
    # update rule order
    ruleorder: fastqc_raw_reads > hisat2_remove_host_dna > fastqc_on_host_removed_reads > classify_with_kraken
    # select the correct indicies
    hisat_indices = host_dict[host_genome]
    k_input = "output/{sample}/hisat2_results/{sample}_host_removed.fastq.gz"
    msg = f'Host genome {host_genome} selected. ADDING Hisat2 to remove host dna and fastqc on host removed reads \n'

sys.stderr.write(msg)

rule all:
    input:
        rule_all_list

rule fastqc_raw_reads:
    input:
        raw_read = 'staging/se_reads/{sample}.fastq.gz',
    params:
        fastqc_dir = 'output/{sample}/fastqc_results/raw_reads',
        out = 'output'
    output:
        fastqc_html = 'output/{sample}/fastqc_results/raw_reads/raw_{sample}_fastqc.html',
        fastqc_zip = 'output/{sample}/fastqc_results/raw_reads/raw_{sample}_fastqc.zip'
    threads: 4
    shell:
        '''
        mkdir -p {params.fastqc_dir}

        fastqc --version
        
        fastqc {input.raw_read} \
        -t {threads} \
        -o {params.fastqc_dir} -q

        mv {params.fastqc_dir}/{wildcards.sample}_fastqc.html {output.fastqc_html}
        mv {params.fastqc_dir}/{wildcards.sample}_fastqc.zip {output.fastqc_zip}
        '''


rule hisat2_remove_host_dna:
    input:
        raw_read = 'staging/se_reads/{sample}.fastq.gz',
    params:
        hisat2_dir = 'output/{sample}/hisat2_results',
        tmp_name = '{sample}_host_removed',
        hisat_indices_filename = hisat_indices
    output:
        sam = 'output/{sample}/hisat2_results/{sample}_aligned_reads.sam',
        out = 'output/{sample}/hisat2_results/{sample}_host_removed.fastq.gz',
    threads: 16
    shell:
        '''
        mkdir -p {params.hisat2_dir}

        hisat2 --version

        echo "starting hisat2......"

        hisat2 -x {params.hisat_indices_filename} \
            -U {input.raw_read} \
            --un-gz \
            {params.tmp_name} -S {output.sam} \
            --threads {threads}

        mv {params.tmp_name} {output.out}
        '''

rule fastqc_on_host_removed_reads:
    input:
        clean_read = 'output/{sample}/hisat2_results/{sample}_host_removed.fastq.gz',
    params:
        fastqc_dir = 'output/{sample}/fastqc_results/host_removed_reads'
    output:
        fastqc_html = 'output/{sample}/fastqc_results/host_removed_reads/{sample}_host_removed_fastqc.html',
        fastqc_zip = 'output/{sample}/fastqc_results/host_removed_reads/{sample}_host_removed_fastqc.zip'
    threads: 4
    shell:
        '''
        mkdir -p {params.fastqc_dir}

        fastqc --version
        
        fastqc {input.clean_read} \
        -t {threads} \
        -o {params.fastqc_dir} -q
        '''

rule classify_with_kraken:
    input:
        kraken2_input = k_input
    params:
        database = database_path,
        kraken_dir = 'output/{sample}/kraken_output',
        classified_flag = cf,
        classified_fq = co,
        unclassified_flag = ucf,
        unclassified_fq = uco,
        ci = confidence_interval
    output:
        k2_output = 'output/{sample}/kraken_output/{sample}_k2_output.txt',
        k2report = 'output/{sample}/kraken_output/{sample}_k2_report.txt'
    threads: 16
    shell:
        '''
        mkdir -p {params.kraken_dir}

        kraken2 --db {params.database} \
            --threads {threads} \
            --minimum-hit-groups 3 \
            --report-minimizer-data \
            --memory-mapping \
            {params.classified_flag} \
            {params.classified_fq} \
            {params.unclassified_flag} \
            {params.unclassified_fq} \
            --report {output.k2report} \
            {input.kraken2_input} \
            --confidence {params.ci} \
            --output {output.k2_output}
        '''

rule zip_n_move_classified_reads:
    input:
        k2report = 'output/{sample}/kraken_output/{sample}_k2_report.txt'
    params:
        raw_classified = co
    output:
        zippped_classified = co_gz
    shell:
        '''
        gzip -c {params.raw_classified} > {output.zippped_classified}
        '''

rule zip_n_move_unclassified_reads:
    input:
        k2report = 'output/{sample}/kraken_output/{sample}_k2_report.txt'
    params:
        raw_unclassified = uco,
    output:
        zippped_unclassified = uco_gz
    shell:
        '''
        gzip -c {params.raw_unclassified} > {output.zippped_unclassified}
        '''